Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 1
main.asm



      1				     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀					    +
      2				     ⣀⣤⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀				    +
      3				     ⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀
      4				     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢠⣶⣶⣴⡾⠋⠉⠀⠀⠀⠉⠛⢷⣄⠀⠀⠀  +
      5				     ⠀⣠⣶⡾⢷⣄⣰⡾⠛⠉⠉⠙⠻⢶⣄⠀⠀⠀⠀⠀
      6				     ;												    +
      7				     ⠀⠀⣀⣀⠀⠀⠀⣴⠾⠛⢷⡄⠀⠈⣷⠈⢿⣿⣯⣴⠶⣶⣶⣄⠀⠀⠹⣷⡀⠀⠀⣿
      8				     ⠐⠁⢸⣿⠿⣷⣿⣴⣤⣄⠀⠀⠙⢷⣄⠀⠀⠀
      9				     ;												    +
     10				     ⣠⣾⡏⢿⣦⠀⠀⣿⠀⠀⠸⣿⡆⠀⣟⠁⠈⣿⣿⠀⠀⢸⣿⠿⣷⠀⠀⢹⣷⠀⢰⡏
     11				     ⠀⠀⣾⣿⠀⠉⣿⠋⠋⢹⣿⣦⠀⠀⠙⣧⡀⠀
     12				     ; ⣿⠀⠁⢸⣿⠀⠀⣿⠀⠀⠀⣿⣇⠀						    +
     13				     ⣿⠀⠀⣼⣿⠀⠀⢸⣿⠀⣿⠀⠀⢸⣿⡇⣸⡇⠀⠀⣿⡿⠀⠀⣿⠀⠀⢸⣿⡿⣷⡀
     14				     ⠀⠸⣷⡀
     15				     ;												    +
     16				     ⢻⡇⠀⠸⣿⡄⠀⣿⠀⠀⠀⢸⣿⡀⢸⡆⠀⢹⣿⡆⠀⠸⣿⣿⠟⠀⠀⣾⣿⠇⣿⠁
     17				     ⠀⢸⣿⡇⠀⠀⣿⡆⠀⢸⣿⡇⠸⣧⠀⠀⢻⣧
     18				     ;												    +
     19				     ⠘⣷⠀⠀⢹⣧⢰⡿⠀⠀⠀⠀⢿⣇⣸⠇⠀⢸⣿⡇⠀⠐⠛⠁⠀⣠⣾⣿⡟⢠⡿⠀
     20				     ⠀⢸⣿⡇⠀⠀⢸⡇⠀⢸⣿⡇⠀⣿⠀⠀⢸⣿
     21				     ;												    +
     22				     ⠀⢹⣇⠀⠀⢻⣿⡇⠀⠀⡆⠀⠘⣿⣿⠀⠀⣼⣿⣧⠀⠀⢀⠀⠘⢿⣿⠏⠀⢸⡇⠀
     23				     ⠀⣾⣿⣠⣴⣦⣸⡇⠀⢸⣿⡇⠀⣿⠀⠀⢸⣿
     24				     ;												    +
     25				     ⠀⠀⢻⡆⠀⠀⠿⠀⠀⣸⣷⠀⠀⢻⠇⠀⢠⣿⣿⢿⡄⠀⠘⣧⠀⠀⢻⣆⠀⣿⠃⠀
     26				     ⢠⣿⣿⣿⠄⠙⢿⣷⣴⣾⣿⣇⣴⡟⠀⠀⣾⣿
     27				     ;												    +
     28				     ⠀⠀⠈⣿⠀⠀⠀⠀⢠⣿⣿⡀⠀⠀⠀⣠⣾⣿⠇⢸⣇⠀⡀⣿⣇⠀⠀⣿⣶⡿⠀⠀
     29				     ⡼⠿⠛⠛⠀⠀⠈ ⣿⣄⠀⠈⠉⠁⠀⢀⣼⣿⡏
     30				     ;												    +
     31				     ⠀⠀⠀⢻⣆⠀⢀⣴⣿⣿⢿⣧⣀⣀⣴⣿⣿⠏⠀⠀⢻⣶⣿⣿⣿⣦⣸⣿⣿⡁⠀⠀
     32				     ⠀⢀⣀⣄⣤⣀⣴⣿⣿⣷⣶⣶⣶⣾⣿⡿⠋⠀
     33				     ;												    +
     34				     ⠀⠀⠀⠀⠻⣿⣿⣽⠿⠃⠀⠹⢿⣿⣿⠟⠁⠀⠀⠀⠀⠉⠋⠁⠀⠙⢿⡿⠛⣿⣶⣾
     35				     ⣿⣿⣿⣿⠿⠿⠿⠟⠁⠈⠉⠛⠛⠉⠁⠀⠀⠀
     36				     ;												    +
     37				     ⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣄⣀⠀⠈⠉⠉
     38				     ⠉⠉⠀⢀⣀⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀
     39				     ;												    +
     40				     ⠀⠀⠀⠀⠀⣠⡾⠋⠁⠀⠀⠀⠉⠛⢷⡄⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠈⠙⢷⣄⠀⠀
     41				     ⠀⢀⣴⠟⠉⠀⠀⠀⠈⠙⠻⣦⡀⠀⠀⠀⠀⠀
     42				     ;												    +
     43				     ⠀⠀⠀⠀⣼⠏⠀⢀⣴⢶⣶⣦⣄⠀⠈⢻⣆⠀⢰⡟⠁⠀⣠⣶⣶⣶⣄⠀⠀⠹⣧⠀
     44				     ⢀⣾⠃⠀⣠⣶⣶⣶⣦⡀⠀⠘⣷⡄⠀⠀⠀⠀
     45				     ;												    +
     46				     ⠀⠀⠀⢠⣿⠀⠀⣿⣿⠟⠉⠉⢻⡆⠀⠈⣿⣆⣿⠀⠀⣼⣿⠟⠉⠉⠻⣧⠀⠀⢻⣇
     47				     ⣸⡇⠀⢰⣿⡿⠋⠉⠙⢿⡀⠀⢸⣷⠀⠀⠀⠀
     48				     ;												    +
     49				     ⠀⠀⠀⠘⣿⡀⠀⢻⣯⣀⣀⣠⡾⠿⠀⠀⣿⣿⢿⡄⠀⠹⣿⣄⣀⣀⣴⠿⠀⠀⢸⣿
     50				     ⢹⣇⠀⠘⢿⣇⣀⣀⣴⠿⠇ ⠈⣿⡇⠀⠀⠀
     51				     ;												    +
     52				     ⠀⠀⠀⠀⠙⣷⣄⠀⠈⠉⠉⠉⢀⡠⠀⠀⣿⣿⠘⢿⣄⠀⠀⠉⠉⠉⠀⣠⠀⠀⣸⣿
     53				      ⢻⣦⡀⠀⠈⠉⠉⠁⢀⡄⠀⢰⣿⡇⠀⠀⠀
     54				     ; ⠀⠀⠀⠀⠀⠈⠻⣷⣶⣦⣤⣴⣿⠃⠀⣰⣿⡟⠀⠈⠻⣿⣶⣦⣤⣴⣾⠏⢀	    +
     55				     ⣿⣿ ⠀⠙⢿⣷⣶⣤⣤⣾⡞⠁⣼⣿⠇⠀⠀⠀
     56				     ;												    +
     57				     ⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣻⡿⠁⠀⢠⣿⣿⠃⠀⠀⠀⠀⠉⠙⢛⣿⠋⠀⢀⣾⣿⠇
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 2
main.asm



     58				     ⠀⠀⠀⠀⠈⠉⠛⣿⠟⠀⠀⣰⣿⡟⠀⠀⠀⠀
     59				     ;												    +
     60				     ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠋⠀⢀⣴⣿⡿⠃⠀⠀⠀⠀⠀⠀⣴⠟⠁⠀⣠⣿⣿⠏⠀
     61				     ⠀⠀⠀⠀⠀⣠⡾⠋⠀⢠⣾⣿⡟⠁⠀⠀⠀⠀
     62				     ;												    +
     63				     ⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣶⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⢻⣾⣧⣾⣿⠟⠁⠀⠀
     64				     ⠀⠀⠀⠀⠀⠙⣿⣿⣾⣿⣿⠋⠀⠀⠀⠀⠀⠀
     65				     ;												    +
     66				     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠁⠀⠀⠀⠀
     67				     ⠀⠀⠀⠀⠀⠀	⠈⠙⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀
     68
     69				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
     70				     ;								  ;
     71				     ; From flopsreallygotit to	strong and fearless asm	enjoyers. ;
     72				     ;								  ;
     73				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
     74
     75	0000			     .model tiny
     76				     .286
     77
     78				     locals @@
     79
     80				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     81
     82	0000			     .data
     83
     84				     ;~~~Video Output~~~
     85	      =B800		     video = 0b800h  ; Address of video	segment	start.
     86	      =003E		     color = 3eh     ; Output color.
     87
     88				     ;~~~Cipher~~~
     89	0000  64 64 64 64 00	     cipher db 'dddd', 0
     90
     91				     ;~~~Messages~~~
     92	0005  41 63 63 65 73 73	20+  wrong_message db 'Access denied', 0
     93	      64 65 6E 69 65 64	00
     94	0013  41 63 63 65 73 73	20+  right_message db 'Access approved', 0
     95	      61 70 70 72 6F 76	65+
     96	      64 00
     97
     98				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     99
    100				     include macro.asm
1   101				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   102				     ; Exits to	DOS
1   103				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   104				     ; Entry:	 None
1   105				     ; Exit:	 None
1   106				     ; Expects:	 None
1   107				     ; Destroys: AX
1   108				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   109
1   110				     EXIT	 macro
1   111						 nop
1   112						 mov ax, 4c00h
1   113						 int 21h
1   114						 nop
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 3
main.asm



1   115						 endm
1   116
1   117				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   118				     ; Pushes AX, BX, CX, DX, SP, BP, SI, DI, ES, DS
1   119				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   120				     ; Entry:	 None
1   121				     ; Exit:	 None
1   122				     ; Expects:	 None
1   123				     ; Destroys: None
1   124				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   125
1   126				     PUSHALL	 macro
1   127						 nop
1   128						 pusha
1   129						 push es ds
1   130						 nop
1   131						 endm
1   132
1   133				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   134				     ; Pops out	AX, BX,	CX, DX,	SP, BP,	SI, DI,	ES, DS (in reverse order)
1   135				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   136				     ; Entry:	 None
1   137				     ; Exit:	 None
1   138				     ; Expects:	 None
1   139				     ; Destroys: None
1   140				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   141
1   142				     POPALL	 macro
1   143						 nop
1   144						 pop ds	es
1   145						 popa
1   146						 nop
1   147						 endm
1   148
1   149				     DELAY	 macro
1   150						 nop
1   151						 push bx cx
1   152
1   153						 mov bx, 400d
1   154						 @@Next:     mov cx, -1
1   155
1   156						 @@Delay:    loop @@Delay
1   157
1   158							     dec bx
1   159							     cmp bx, 00h
1   160							     jne @@Next
1   161
1   162						 pop cx	bx
1   163						 nop
1   164						 endm
1   165
    166
    167				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    168
    169	0023			     .code
    170
    171				     org 100h
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 4
main.asm



    172
    173	0100  EB 16 90		     Start:	 jmp @@Main
    174	0103  14*(30) 00			 buffer	db 20 dup(48d),	0
    175
    176	0118  81 F3 B800	     @@Main:	 xor bx, video
    177	011C  8E C3				 mov es, bx
    178	011E  33 DB				 xor bx, bx
    179
    180	0120  BE 0103r				 mov si, offset	buffer
    181	0123  E8 00BC				 call Parse
    182
    183	0126  BE 0103r				 mov si, offset	buffer
    184	0129  BF 0000r				 mov di, offset	cipher
    185	012C  E8 00C4				 call Encrypte
    186
    187	012F  3D 0000				 cmp ax, 0000h
    188	0132  75 06				 jne @@Wrong
    189
    190	0134  BE 0013r				 mov si, offset	right_message
    191	0137  EB 04 90				 jmp @@End
    192
    193	013A  BE 0005r				 @@Wrong:    mov si, offset wrong_message
    194
    195	013D  E8 00CC				 @@End:	     call PrintLbl
    196
    197						 EXIT
1   198	0140  90				 nop
1   199	0141  B8 4C00				 mov ax, 4c00h
1   200	0144  CD 21				 int 21h
1   201	0146  90				 nop
    202
    203				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    204
    205				     include string.asm
1   206				     ;~~~WARNING: These	functions work only with 0-terminated strings :WARNING~~~
1   207				     ;~~~WARNING: Some functions need color constant for correct out  :WARNING~~~
1   208
1   209				     ; Good_string_example:  db	"aboba", 0
1   210				     ; Bad_string_example:   db	"I don't read warnings xD"
1   211				     ; color = 4eh
1   212
1   213				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   214				     ; Prints 0-terminated string.
1   215				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   216				     ; Entry:	 SI = Address of string, DI = Display shift
1   217				     ; Exit:	 SI = Address of the end of string, DI = New display shift
1   218				     ; Expects:	 ES = Address of video segment start
1   219				     ; Destroys: None
1   220				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   221
1   222	0147			     PrintStr	     proc
1   223	0147  90				     nop
1   224	0148  50				     push ax
1   225
1   226	0149  B4 3E				     mov ah, color
1   227
1   228	014B  AC		     @@Next:	     lodsb
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 5
main.asm



1   229	014C  3C 00				     cmp al, 0
1   230	014E  74 03				     je	@@End
1   231
1   232	0150  AB				     stosw
1   233
1   234	0151  EB F8				     jmp @@Next
1   235
1   236	0153  58		     @@End:	     pop ax
1   237	0154  90				     nop
1   238	0155					     endp
1   239
1   240				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   241				     ; Counts length of	string
1   242				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   243				     ; Entry:	 SI = Address of string
1   244				     ; Exit:	 CX = Length of	string
1   245				     ; Expects:	 None
1   246				     ; Destroys: None
1   247				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   248
1   249	0155			     Strlen	 proc
1   250	0155  33 C9				 xor cx, cx
1   251	0157  50 56				 push ax si
1   252
1   253	0159  41		     @@Next:	 inc cx
1   254	015A  AC				 lodsb
1   255	015B  3C 00				 cmp al, 0
1   256	015D  75 FA				 jne @@Next
1   257
1   258	015F  49				 dec cx
1   259	0160  5E 58				 pop si	ax
1   260
1   261	0162  C3				 ret
1   262	0163					 endp
1   263
1   264				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   265				     ; Finds index of symbol in	string
1   266				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   267				     ; Entry:	 SI = Address of string,
1   268				     ;		 BL = Symbol
1   269				     ; Exit:	 CX = -1 / Index of symbol in string
1   270				     ; Expects:	 None
1   271				     ; Destroys: None
1   272				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   273
1   274	0163			     Strchr	     proc
1   275	0163  50 56				     push ax si
1   276	0165  33 C9				     xor cx, cx
1   277
1   278	0167  41		     @@Next:	     inc cx
1   279	0168  AC				     lodsb
1   280
1   281	0169  3C 00				     cmp al, 0
1   282	016B  74 06				     je	@@Terminate
1   283
1   284	016D  3A C3				     cmp al, bl
1   285	016F  74 04				     je	@@End
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 6
main.asm



1   286
1   287	0171  EB F4				     jmp @@Next
1   288
1   289	0173  33 C9		     @@Terminate:    xor cx, cx
1   290
1   291	0175  49		     @@End:	     dec cx
1   292	0176  5E 58				     pop si ax
1   293
1   294	0178  C3				     ret
1   295	0179					     endp
1   296
1   297				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   298				     ; Copies the first	n symbols of string
1   299				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   300				     ; Entry:	 SI = Address of string
1   301				     ;		 DI = Address of string	with copied symbols
1   302				     ;		 CX = Number of	symbols	to copy	(n)
1   303				     ; Exit:	 None
1   304				     ; Expects:	 None
1   305				     ; Destroys: None
1   306				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   307
1   308	0179			     Strncpy	 proc
1   309	0179  53 51 57 56			 push bx cx di si
1   310
1   311	017D  A4		     @@Next:	 movsb
1   312	017E  8A 1D				 mov bl, ds:[di]
1   313
1   314	0180  80 FB 00				 cmp bl, 0
1   315	0183  74 02				 je @@End
1   316
1   317	0185  E2 F6				 loop @@Next
1   318
1   319	0187  32 DB		     @@End:	 xor bl, bl
1   320	0189  88 1D				 mov ds:[di], bl
1   321
1   322	018B  5E 5F 59 5B			 pop si	di cx bx
1   323
1   324	018F  C3				 ret
1   325	0190					 endp
1   326
1   327				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   328				     ; Compares	the first n symbols of strings
1   329				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   330				     ; Entry:	 SI = Address of first string
1   331				     ;		 DI = Address of second	string
1   332				     ;		 CX = Number of	symbols	to compare (n)
1   333				     ; Exit:	 AX = 0	String1[:n] == String2[:n]
1   334				     ;		 AX > 0	String1[:n] >  String2[:n]
1   335				     ;		 AX < 0	String1[:n] <  String2[:n]
1   336				     ; Expects:	 None
1   337				     ; Destroys: None
1   338				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   339
1   340	0190			     Strncmp	 proc
1   341	0190  53 51 57 56			 push bx cx di si
1   342
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 7
main.asm



1   343	0194  33 C0				 xor ax, ax
1   344
1   345	0196  8A 04		     @@Next:	 mov al, [si]
1   346	0198  8A 1D				 mov bl, [di]
1   347
1   348	019A  2B C3				 sub ax, bx
1   349	019C  46				 inc si
1   350	019D  47				 inc di
1   351
1   352	019E  3D 0000				 cmp ax, 0
1   353	01A1  75 0A				 jne @@End
1   354
1   355	01A3  83 FB 00				 cmp bx, 0
1   356	01A6  74 02				 je @@StrEnd
1   357
1   358	01A8  E2 EC				 loop @@Next
1   359
1   360	01AA  B8 0000		     @@StrEnd:	 mov ax, 0
1   361
1   362	01AD  5E 5F 59 5B	     @@End:	 pop si	di cx bx
1   363
1   364	01B1  C3				 ret
1   365	01B2					 endp
1   366
1   367				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   368				     ; Converts	number with 16 radix in	string
1   369				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   370				     ; Entry:	 BX = Number
1   371				     ;		 DI = Address to put string
1   372				     ; Exit:	 DI = Address after string is placed
1   373				     ; Expects:	 None
1   374				     ; Destroys: None
1   375				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   376
1   377	01B2			     Itoa16	 proc
1   378	01B2  50 53 51 56			 push ax bx cx si
1   379
1   380	01B6  B9 0004				 mov cx, 4
1   381
1   382	01B9  BE 01D2r		     @@Next:	 mov si, offset	hex_string
1   383	01BC  8B C3				 mov ax, bx
1   384	01BE  C1 E8 0C				 shr ax, 12d
1   385	01C1  03 F0				 add si, ax
1   386	01C3  8B 04				 mov ax, [si]
1   387	01C5  B4 3E				 mov ah, color
1   388	01C7  AB				 stosw
1   389	01C8  C1 E3 04				 shl bx, 4d
1   390
1   391	01CB  E2 EC				 loop @@Next
1   392
1   393	01CD  5E 59 5B 58			 pop si	cx bx ax
1   394
1   395	01D1  C3				 ret
1   396	01D2					 endp
1   397
1   398	01D2  30 31 32 33 34 35	36+  hex_string	db '0123456789ABCDEF'
    399	      37 38 39 41 42 43	44+
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 8
main.asm



    400	      45 46
1   401
    402				     include funcs.asm
1   403				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   404				     ; Puts address string in register and terminates it
1   405				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   406				     ; Entry:	 SI = Address of buffer
1   407				     ; Exit:	 SI = Address of the end of string
1   408				     ; Expects:	 None
1   409				     ; Destroys: AX
1   410				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   411
1   412	01E2			     Parse	 proc										    +
    413				     ; VULNERABILITY: NO LENGTH	CONTROL
1   414	01E2  B4 01				 mov ah, 01h
1   415
1   416	01E4  CD 21		     @@Next:	 int 21h
1   417	01E6  3C 0D				 cmp al, 0dh
1   418	01E8  74 05				 je @@End
1   419
1   420	01EA  88 04				 mov [si], al
1   421	01EC  46				 inc si
1   422
1   423	01ED  EB F5				 jmp @@Next
1   424
1   425	01EF  C6 04 00		     @@End:	 mov byte ptr [si], 00h
1   426
1   427	01F2  C3				 ret
1   428	01F3					 endp
1   429
1   430				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   431				     ; Encryptes cipher	and compares it	with given password
1   432				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   433				     ; Entry:	 SI = Address of terminated password string
1   434				     ;		 DI = Address of terminated cipher string
1   435				     ; Exit:	 AX = 0	 if password is	correct
1   436				     ;		 AX != 0 if password isn't correct
1   437				     ; Expects:	 None
1   438				     ; Destroys: CX
1   439				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   440
1   441	01F3			     Encrypte	 proc
1   442	01F3  56				 push si
1   443
1   444	01F4  8B 04		     @@Next:	 mov ax, [si]
1   445	01F6  3C 00				 cmp al, 00h
1   446	01F8  74 08				 je @@End
1   447
1   448	01FA  05 0003				 add ax, 3d
1   449	01FD  89 04				 mov [si], ax
1   450	01FF  46				 inc si
1   451
1   452	0200  EB F2				 jmp @@Next
1   453
1   454	0202  5E		     @@End:	 pop si
1   455
1   456	0203  87 F7				     xchg si, di
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 9
main.asm



1   457	0205  E8 FF4D				 call Strlen
1   458	0208  E8 FF85				 call Strncmp
1   459
1   460	020B  C3				 ret
1   461	020C					 endp
1   462
1   463				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   464				     ; Prints label on center
1   465				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   466				     ; Entry:	 SI = Address of label
1   467				     ; Exit:	 None
1   468				     ; Expects:	 None
1   469				     ; Destroys: DI
1   470				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   471
1   472	020C			     PrintLbl	 proc
1   473	020C  BF 07D0				 mov di, 2 * (40 + 80 *	12)
1   474
1   475	020F  E8 FF43				 call Strlen
1   476	0212  D1 E9				 shr cx, 1d
1   477	0214  D1 E1				 shl cx, 1d
1   478	0216  2B F9				 sub di, cx
1   479
1   480	0218  E8 FF2C				 call PrintStr
1   481
1   482	021B  C3				 ret
1   483	021C					 endp
1   484
    485
    486				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    487
    488				     end Start
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/13/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "13:30:53"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@END				  Near	 DGROUP:013D
@@END				  Near	 DGROUP:0153
@@END				  Near	 DGROUP:0175
@@END				  Near	 DGROUP:0187
@@END				  Near	 DGROUP:01AD
@@END				  Near	 DGROUP:01EF
@@END				  Near	 DGROUP:0202
@@MAIN				  Near	 DGROUP:0118
@@NEXT				  Near	 DGROUP:014B
@@NEXT				  Near	 DGROUP:0159
@@NEXT				  Near	 DGROUP:0167
@@NEXT				  Near	 DGROUP:017D
@@NEXT				  Near	 DGROUP:0196
@@NEXT				  Near	 DGROUP:01B9
@@NEXT				  Near	 DGROUP:01E4
@@NEXT				  Near	 DGROUP:01F4
@@STREND			  Near	 DGROUP:01AA
@@TERMINATE			  Near	 DGROUP:0173
@@WRONG				  Near	 DGROUP:013A
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:0103
CIPHER				  Byte	 DGROUP:0000
COLOR				  Number 003E
ENCRYPTE			  Near	 DGROUP:01F3
HEX_STRING			  Byte	 DGROUP:01D2
ITOA16				  Near	 DGROUP:01B2
PARSE				  Near	 DGROUP:01E2
PRINTLBL			  Near	 DGROUP:020C
PRINTSTR			  Near	 DGROUP:0147
RIGHT_MESSAGE			  Byte	 DGROUP:0013
START				  Near	 DGROUP:0100
STRCHR				  Near	 DGROUP:0163
STRLEN				  Near	 DGROUP:0155
STRNCMP				  Near	 DGROUP:0190
STRNCPY				  Near	 DGROUP:0179
VIDEO				  Number B800
WRONG_MESSAGE			  Byte	 DGROUP:0005
Turbo Assembler	 Version 4.1	    03/13/23 13:30:53	    Page 11
Symbol Table




Macro Name

DELAY
EXIT
POPALL
PUSHALL

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0023 Word	  Public  DATA
  _TEXT				  16  021C Word	  Public  CODE
