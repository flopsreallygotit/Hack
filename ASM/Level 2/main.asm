; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀  ⣀⣤⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀   ⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀
; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢠⣶⣶⣴⡾⠋⠉⠀⠀⠀⠉⠛⢷⣄⠀⠀⠀ ⠀⣠⣶⡾⢷⣄⣰⡾⠛⠉⠉⠙⠻⢶⣄⠀⠀⠀⠀⠀
; ⠀⠀⣀⣀⠀⠀⠀⣴⠾⠛⢷⡄⠀⠈⣷⠈⢿⣿⣯⣴⠶⣶⣶⣄⠀⠀⠹⣷⡀⠀⠀⣿⠐⠁⢸⣿⠿⣷⣿⣴⣤⣄⠀⠀⠙⢷⣄⠀⠀⠀
; ⣠⣾⡏⢿⣦⠀⠀⣿⠀⠀⠸⣿⡆⠀⣟⠁⠈⣿⣿⠀⠀⢸⣿⠿⣷⠀⠀⢹⣷⠀⢰⡏⠀⠀⣾⣿⠀⠉⣿⠋⠋⢹⣿⣦⠀⠀⠙⣧⡀⠀
; ⣿⠀⠁⢸⣿⠀⠀⣿⠀⠀⠀⣿⣇⠀ ⣿⠀⠀⣼⣿⠀⠀⢸⣿⠀⣿⠀⠀⢸⣿⡇⣸⡇⠀⠀⣿⡿⠀⠀⣿⠀⠀⢸⣿⡿⣷⡀⠀⠸⣷⡀
; ⢻⡇⠀⠸⣿⡄⠀⣿⠀⠀⠀⢸⣿⡀⢸⡆⠀⢹⣿⡆⠀⠸⣿⣿⠟⠀⠀⣾⣿⠇⣿⠁⠀⢸⣿⡇⠀⠀⣿⡆⠀⢸⣿⡇⠸⣧⠀⠀⢻⣧
; ⠘⣷⠀⠀⢹⣧⢰⡿⠀⠀⠀⠀⢿⣇⣸⠇⠀⢸⣿⡇⠀⠐⠛⠁⠀⣠⣾⣿⡟⢠⡿⠀⠀⢸⣿⡇⠀⠀⢸⡇⠀⢸⣿⡇⠀⣿⠀⠀⢸⣿
; ⠀⢹⣇⠀⠀⢻⣿⡇⠀⠀⡆⠀⠘⣿⣿⠀⠀⣼⣿⣧⠀⠀⢀⠀⠘⢿⣿⠏⠀⢸⡇⠀⠀⣾⣿⣠⣴⣦⣸⡇⠀⢸⣿⡇⠀⣿⠀⠀⢸⣿
; ⠀⠀⢻⡆⠀⠀⠿⠀⠀⣸⣷⠀⠀⢻⠇⠀⢠⣿⣿⢿⡄⠀⠘⣧⠀⠀⢻⣆⠀⣿⠃⠀⢠⣿⣿⣿⠄⠙⢿⣷⣴⣾⣿⣇⣴⡟⠀⠀⣾⣿
; ⠀⠀⠈⣿⠀⠀⠀⠀⢠⣿⣿⡀⠀⠀⠀⣠⣾⣿⠇⢸⣇⠀⡀⣿⣇⠀⠀⣿⣶⡿⠀⠀⡼⠿⠛⠛⠀⠀⠈ ⣿⣄⠀⠈⠉⠁⠀⢀⣼⣿⡏
; ⠀⠀⠀⢻⣆⠀⢀⣴⣿⣿⢿⣧⣀⣀⣴⣿⣿⠏⠀⠀⢻⣶⣿⣿⣿⣦⣸⣿⣿⡁⠀⠀⠀⢀⣀⣄⣤⣀⣴⣿⣿⣷⣶⣶⣶⣾⣿⡿⠋⠀
; ⠀⠀⠀⠀⠻⣿⣿⣽⠿⠃⠀⠹⢿⣿⣿⠟⠁⠀⠀⠀⠀⠉⠋⠁⠀⠙⢿⡿⠛⣿⣶⣾⣿⣿⣿⣿⠿⠿⠿⠟⠁⠈⠉⠛⠛⠉⠁⠀⠀⠀
; ⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣄⣀⠀⠈⠉⠉⠉⠉⠀⢀⣀⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀
; ⠀⠀⠀⠀⠀⣠⡾⠋⠁⠀⠀⠀⠉⠛⢷⡄⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠈⠙⢷⣄⠀⠀⠀⢀⣴⠟⠉⠀⠀⠀⠈⠙⠻⣦⡀⠀⠀⠀⠀⠀
; ⠀⠀⠀⠀⣼⠏⠀⢀⣴⢶⣶⣦⣄⠀⠈⢻⣆⠀⢰⡟⠁⠀⣠⣶⣶⣶⣄⠀⠀⠹⣧⠀⢀⣾⠃⠀⣠⣶⣶⣶⣦⡀⠀⠘⣷⡄⠀⠀⠀⠀
; ⠀⠀⠀⢠⣿⠀⠀⣿⣿⠟⠉⠉⢻⡆⠀⠈⣿⣆⣿⠀⠀⣼⣿⠟⠉⠉⠻⣧⠀⠀⢻⣇⣸⡇⠀⢰⣿⡿⠋⠉⠙⢿⡀⠀⢸⣷⠀⠀⠀⠀
; ⠀⠀⠀⠘⣿⡀⠀⢻⣯⣀⣀⣠⡾⠿⠀⠀⣿⣿⢿⡄⠀⠹⣿⣄⣀⣀⣴⠿⠀⠀⢸⣿⢹⣇⠀⠘⢿⣇⣀⣀⣴⠿⠇ ⠈⣿⡇⠀⠀⠀
; ⠀⠀⠀⠀⠙⣷⣄⠀⠈⠉⠉⠉⢀⡠⠀⠀⣿⣿⠘⢿⣄⠀⠀⠉⠉⠉⠀⣠⠀⠀⣸⣿ ⢻⣦⡀⠀⠈⠉⠉⠁⢀⡄⠀⢰⣿⡇⠀⠀⠀
; ⠀⠀⠀⠀⠀⠈⠻⣷⣶⣦⣤⣴⣿⠃⠀⣰⣿⡟⠀⠈⠻⣿⣶⣦⣤⣴⣾⠏⢀ ⣿⣿ ⠀⠙⢿⣷⣶⣤⣤⣾⡞⠁⣼⣿⠇⠀⠀⠀
; ⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣻⡿⠁⠀⢠⣿⣿⠃⠀⠀⠀⠀⠉⠙⢛⣿⠋⠀⢀⣾⣿⠇⠀⠀⠀⠀⠈⠉⠛⣿⠟⠀⠀⣰⣿⡟⠀⠀⠀⠀
; ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠋⠀⢀⣴⣿⡿⠃⠀⠀⠀⠀⠀⠀⣴⠟⠁⠀⣠⣿⣿⠏⠀⠀⠀⠀⠀⠀⣠⡾⠋⠀⢠⣾⣿⡟⠁⠀⠀⠀⠀
; ⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣶⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⢻⣾⣧⣾⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⠙⣿⣿⣾⣿⣿⠋⠀⠀⠀⠀⠀⠀
; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⠈⠙⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
;                                                            ;
; From flopsreallygotit to strong and fearless asm enjoyers. ;
;                                                            ;
;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;

.model tiny
.286

locals @@

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.data

;~~~Video Output~~~
video = 0b800h  ; Address of video segment start.
color = 3eh     ; Output color.     

;~~~Cipher~~~
cipher db 'dddd', 0

;~~~Messages~~~
wrong_message db 'Access denied', 0
right_message db 'Access approved', 0

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

include macro.asm

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.code

org 100h

Start:      xor bx, video
            mov es, bx
            xor bx, bx

            mov si, offset buffer
            call Parse

            mov si, offset buffer
            mov di, offset cipher
            call Encrypte

            cmp ax, 0000h
            jne @@Wrong

            mov si, offset right_message
            jmp @@End

            @@Wrong:    mov si, offset wrong_message

            @@End:      call PrintLbl
            
            EXIT

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

include string.asm
include funcs.asm

buffer db 20 dup(48d), 0

;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

end Start
