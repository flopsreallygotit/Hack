Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 1
main.asm



      1				     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀					    +
      2				     ⣀⣤⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀				    +
      3				     ⣀⣀⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀
      4				     ; ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀ ⢠⣶⣶⣴⡾⠋⠉⠀⠀⠀⠉⠛⢷⣄⠀⠀⠀  +
      5				     ⠀⣠⣶⡾⢷⣄⣰⡾⠛⠉⠉⠙⠻⢶⣄⠀⠀⠀⠀⠀
      6				     ;												    +
      7				     ⠀⠀⣀⣀⠀⠀⠀⣴⠾⠛⢷⡄⠀⠈⣷⠈⢿⣿⣯⣴⠶⣶⣶⣄⠀⠀⠹⣷⡀⠀⠀⣿
      8				     ⠐⠁⢸⣿⠿⣷⣿⣴⣤⣄⠀⠀⠙⢷⣄⠀⠀⠀
      9				     ;												    +
     10				     ⣠⣾⡏⢿⣦⠀⠀⣿⠀⠀⠸⣿⡆⠀⣟⠁⠈⣿⣿⠀⠀⢸⣿⠿⣷⠀⠀⢹⣷⠀⢰⡏
     11				     ⠀⠀⣾⣿⠀⠉⣿⠋⠋⢹⣿⣦⠀⠀⠙⣧⡀⠀
     12				     ; ⣿⠀⠁⢸⣿⠀⠀⣿⠀⠀⠀⣿⣇⠀						    +
     13				     ⣿⠀⠀⣼⣿⠀⠀⢸⣿⠀⣿⠀⠀⢸⣿⡇⣸⡇⠀⠀⣿⡿⠀⠀⣿⠀⠀⢸⣿⡿⣷⡀
     14				     ⠀⠸⣷⡀
     15				     ;												    +
     16				     ⢻⡇⠀⠸⣿⡄⠀⣿⠀⠀⠀⢸⣿⡀⢸⡆⠀⢹⣿⡆⠀⠸⣿⣿⠟⠀⠀⣾⣿⠇⣿⠁
     17				     ⠀⢸⣿⡇⠀⠀⣿⡆⠀⢸⣿⡇⠸⣧⠀⠀⢻⣧
     18				     ;												    +
     19				     ⠘⣷⠀⠀⢹⣧⢰⡿⠀⠀⠀⠀⢿⣇⣸⠇⠀⢸⣿⡇⠀⠐⠛⠁⠀⣠⣾⣿⡟⢠⡿⠀
     20				     ⠀⢸⣿⡇⠀⠀⢸⡇⠀⢸⣿⡇⠀⣿⠀⠀⢸⣿
     21				     ;												    +
     22				     ⠀⢹⣇⠀⠀⢻⣿⡇⠀⠀⡆⠀⠘⣿⣿⠀⠀⣼⣿⣧⠀⠀⢀⠀⠘⢿⣿⠏⠀⢸⡇⠀
     23				     ⠀⣾⣿⣠⣴⣦⣸⡇⠀⢸⣿⡇⠀⣿⠀⠀⢸⣿
     24				     ;												    +
     25				     ⠀⠀⢻⡆⠀⠀⠿⠀⠀⣸⣷⠀⠀⢻⠇⠀⢠⣿⣿⢿⡄⠀⠘⣧⠀⠀⢻⣆⠀⣿⠃⠀
     26				     ⢠⣿⣿⣿⠄⠙⢿⣷⣴⣾⣿⣇⣴⡟⠀⠀⣾⣿
     27				     ;												    +
     28				     ⠀⠀⠈⣿⠀⠀⠀⠀⢠⣿⣿⡀⠀⠀⠀⣠⣾⣿⠇⢸⣇⠀⡀⣿⣇⠀⠀⣿⣶⡿⠀⠀
     29				     ⡼⠿⠛⠛⠀⠀⠈ ⣿⣄⠀⠈⠉⠁⠀⢀⣼⣿⡏
     30				     ;												    +
     31				     ⠀⠀⠀⢻⣆⠀⢀⣴⣿⣿⢿⣧⣀⣀⣴⣿⣿⠏⠀⠀⢻⣶⣿⣿⣿⣦⣸⣿⣿⡁⠀⠀
     32				     ⠀⢀⣀⣄⣤⣀⣴⣿⣿⣷⣶⣶⣶⣾⣿⡿⠋⠀
     33				     ;												    +
     34				     ⠀⠀⠀⠀⠻⣿⣿⣽⠿⠃⠀⠹⢿⣿⣿⠟⠁⠀⠀⠀⠀⠉⠋⠁⠀⠙⢿⡿⠛⣿⣶⣾
     35				     ⣿⣿⣿⣿⠿⠿⠿⠟⠁⠈⠉⠛⠛⠉⠁⠀⠀⠀
     36				     ;												    +
     37				     ⠀⠀⠀⠀⠀⠀⠀⣀⣤⣤⣤⣤⣄⡀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣄⣀⠀⠈⠉⠉
     38				     ⠉⠉⠀⢀⣀⣤⣤⣤⣤⣀⠀⠀⠀⠀⠀⠀⠀⠀
     39				     ;												    +
     40				     ⠀⠀⠀⠀⠀⣠⡾⠋⠁⠀⠀⠀⠉⠛⢷⡄⠀⠀⠀⣠⣾⠟⠁⠀⠀⠀⠈⠙⢷⣄⠀⠀
     41				     ⠀⢀⣴⠟⠉⠀⠀⠀⠈⠙⠻⣦⡀⠀⠀⠀⠀⠀
     42				     ;												    +
     43				     ⠀⠀⠀⠀⣼⠏⠀⢀⣴⢶⣶⣦⣄⠀⠈⢻⣆⠀⢰⡟⠁⠀⣠⣶⣶⣶⣄⠀⠀⠹⣧⠀
     44				     ⢀⣾⠃⠀⣠⣶⣶⣶⣦⡀⠀⠘⣷⡄⠀⠀⠀⠀
     45				     ;												    +
     46				     ⠀⠀⠀⢠⣿⠀⠀⣿⣿⠟⠉⠉⢻⡆⠀⠈⣿⣆⣿⠀⠀⣼⣿⠟⠉⠉⠻⣧⠀⠀⢻⣇
     47				     ⣸⡇⠀⢰⣿⡿⠋⠉⠙⢿⡀⠀⢸⣷⠀⠀⠀⠀
     48				     ;												    +
     49				     ⠀⠀⠀⠘⣿⡀⠀⢻⣯⣀⣀⣠⡾⠿⠀⠀⣿⣿⢿⡄⠀⠹⣿⣄⣀⣀⣴⠿⠀⠀⢸⣿
     50				     ⢹⣇⠀⠘⢿⣇⣀⣀⣴⠿⠇ ⠈⣿⡇⠀⠀⠀
     51				     ;												    +
     52				     ⠀⠀⠀⠀⠙⣷⣄⠀⠈⠉⠉⠉⢀⡠⠀⠀⣿⣿⠘⢿⣄⠀⠀⠉⠉⠉⠀⣠⠀⠀⣸⣿
     53				      ⢻⣦⡀⠀⠈⠉⠉⠁⢀⡄⠀⢰⣿⡇⠀⠀⠀
     54				     ; ⠀⠀⠀⠀⠀⠈⠻⣷⣶⣦⣤⣴⣿⠃⠀⣰⣿⡟⠀⠈⠻⣿⣶⣦⣤⣴⣾⠏⢀	    +
     55				     ⣿⣿ ⠀⠙⢿⣷⣶⣤⣤⣾⡞⠁⣼⣿⠇⠀⠀⠀
     56				     ;												    +
     57				     ⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⣻⡿⠁⠀⢠⣿⣿⠃⠀⠀⠀⠀⠉⠙⢛⣿⠋⠀⢀⣾⣿⠇
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 2
main.asm



     58				     ⠀⠀⠀⠀⠈⠉⠛⣿⠟⠀⠀⣰⣿⡟⠀⠀⠀⠀
     59				     ;												    +
     60				     ⠀⠀⠀⠀⠀⠀⠀⠀⢀⣾⠋⠀⢀⣴⣿⡿⠃⠀⠀⠀⠀⠀⠀⣴⠟⠁⠀⣠⣿⣿⠏⠀
     61				     ⠀⠀⠀⠀⠀⣠⡾⠋⠀⢠⣾⣿⡟⠁⠀⠀⠀⠀
     62				     ;												    +
     63				     ⠀⠀⠀⠀⠀⠀⠀⠀⠘⢿⣿⣶⣿⣿⠟⠁⠀⠀⠀⠀⠀⠀⠀⢻⣾⣧⣾⣿⠟⠁⠀⠀
     64				     ⠀⠀⠀⠀⠀⠙⣿⣿⣾⣿⣿⠋⠀⠀⠀⠀⠀⠀
     65				     ;												    +
     66				     ⠀⠀⠀⠀⠀⠀⠀⠀⠀⠈⠉⠛⠛⠁⠀⠀⠀⠀⠀⠀⠀⠀⠀⠀⠉⠙⠛⠁⠀⠀⠀⠀
     67				     ⠀⠀⠀⠀⠀⠀	⠈⠙⠛⠋⠀⠀⠀⠀⠀⠀⠀⠀
     68
     69				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
     70				     ;								  ;
     71				     ; From flopsreallygotit to	strong and fearless asm	enjoyers. ;
     72				     ;								  ;
     73				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~;
     74
     75	0000			     .model tiny
     76				     .286
     77
     78				     locals @@
     79
     80				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     81
     82	0000			     .data
     83
     84				     ;~~~Video Output~~~
     85	      =B800		     video = 0b800h  ; Address of video	segment	start.
     86	      =003E		     color = 3eh     ; Output color.
     87
     88				     ;~~~Cipher~~~
     89	0000  64 64 64 64 00	     cipher db 'dddd', 0
     90
     91				     ;~~~Messages~~~
     92	0005  41 63 63 65 73 73	20+  wrong_message db 'Access denied', 0
     93	      64 65 6E 69 65 64	00
     94	0013  41 63 63 65 73 73	20+  right_message db 'Access approved', 0
     95	      61 70 70 72 6F 76	65+
     96	      64 00
     97
     98				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
     99
    100				     include macro.asm
1   101				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   102				     ; Exits to	DOS
1   103				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   104				     ; Entry:	 None
1   105				     ; Exit:	 None
1   106				     ; Expects:	 None
1   107				     ; Destroys: AX
1   108				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   109
1   110				     EXIT	 macro
1   111						 nop
1   112						 mov ax, 4c00h
1   113						 int 21h
1   114						 nop
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 3
main.asm



1   115						 endm
1   116
1   117				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   118				     ; Pushes AX, BX, CX, DX, SP, BP, SI, DI, ES, DS
1   119				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   120				     ; Entry:	 None
1   121				     ; Exit:	 None
1   122				     ; Expects:	 None
1   123				     ; Destroys: None
1   124				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   125
1   126				     PUSHALL	 macro
1   127						 nop
1   128						 pusha
1   129						 push es ds
1   130						 nop
1   131						 endm
1   132
1   133				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   134				     ; Pops out	AX, BX,	CX, DX,	SP, BP,	SI, DI,	ES, DS (in reverse order)
1   135				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   136				     ; Entry:	 None
1   137				     ; Exit:	 None
1   138				     ; Expects:	 None
1   139				     ; Destroys: None
1   140				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   141
1   142				     POPALL	 macro
1   143						 nop
1   144						 pop ds	es
1   145						 popa
1   146						 nop
1   147						 endm
1   148
1   149				     DELAY	 macro
1   150						 nop
1   151						 push bx cx
1   152
1   153						 mov bx, 400d
1   154						 @@Next:     mov cx, -1
1   155
1   156						 @@Delay:    loop @@Delay
1   157
1   158							     dec bx
1   159							     cmp bx, 00h
1   160							     jne @@Next
1   161
1   162						 pop cx	bx
1   163						 nop
1   164						 endm
1   165
    166
    167				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    168
    169	0023			     .code
    170
    171				     org 100h
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 4
main.asm



    172
    173	0100  81 F3 B800	     Start:	 xor bx, video
    174	0104  8E C3				 mov es, bx
    175	0106  33 DB				 xor bx, bx
    176
    177	0108  BE 0204r				 mov si, offset	buffer
    178	010B  E8 00BC				 call Parse
    179
    180	010E  BE 0204r				 mov si, offset	buffer
    181	0111  BF 0000r				 mov di, offset	cipher
    182	0114  E8 00C4				 call Encrypte
    183
    184	0117  3D 0000				 cmp ax, 0000h
    185	011A  75 06				 jne @@Wrong
    186
    187	011C  BE 0013r				 mov si, offset	right_message
    188	011F  EB 04 90				 jmp @@End
    189
    190	0122  BE 0005r				 @@Wrong:    mov si, offset wrong_message
    191
    192	0125  E8 00CC				 @@End:	     call PrintLbl
    193
    194						 EXIT
1   195	0128  90				 nop
1   196	0129  B8 4C00				 mov ax, 4c00h
1   197	012C  CD 21				 int 21h
1   198	012E  90				 nop
    199
    200				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    201
    202				     include string.asm
1   203				     ;~~~WARNING: These	functions work only with 0-terminated strings :WARNING~~~
1   204				     ;~~~WARNING: Some functions need color constant for correct out  :WARNING~~~
1   205
1   206				     ; Good_string_example:  db	"aboba", 0
1   207				     ; Bad_string_example:   db	"I don't read warnings xD"
1   208				     ; color = 4eh
1   209
1   210				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   211				     ; Prints 0-terminated string.
1   212				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   213				     ; Entry:	 SI = Address of string, DI = Display shift
1   214				     ; Exit:	 SI = Address of the end of string, DI = New display shift
1   215				     ; Expects:	 ES = Address of video segment start
1   216				     ; Destroys: None
1   217				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   218
1   219	012F			     PrintStr	     proc
1   220	012F  90				     nop
1   221	0130  50				     push ax
1   222
1   223	0131  B4 3E				     mov ah, color
1   224
1   225	0133  AC		     @@Next:	     lodsb
1   226	0134  3C 00				     cmp al, 0
1   227	0136  74 03				     je	@@End
1   228
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 5
main.asm



1   229	0138  AB				     stosw
1   230
1   231	0139  EB F8				     jmp @@Next
1   232
1   233	013B  58		     @@End:	     pop ax
1   234	013C  90				     nop
1   235	013D					     endp
1   236
1   237				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   238				     ; Counts length of	string
1   239				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   240				     ; Entry:	 SI = Address of string
1   241				     ; Exit:	 CX = Length of	string
1   242				     ; Expects:	 None
1   243				     ; Destroys: None
1   244				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   245
1   246	013D			     Strlen	 proc
1   247	013D  33 C9				 xor cx, cx
1   248	013F  50 56				 push ax si
1   249
1   250	0141  41		     @@Next:	 inc cx
1   251	0142  AC				 lodsb
1   252	0143  3C 00				 cmp al, 0
1   253	0145  75 FA				 jne @@Next
1   254
1   255	0147  49				 dec cx
1   256	0148  5E 58				 pop si	ax
1   257
1   258	014A  C3				 ret
1   259	014B					 endp
1   260
1   261				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   262				     ; Finds index of symbol in	string
1   263				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   264				     ; Entry:	 SI = Address of string,
1   265				     ;		 BL = Symbol
1   266				     ; Exit:	 CX = -1 / Index of symbol in string
1   267				     ; Expects:	 None
1   268				     ; Destroys: None
1   269				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   270
1   271	014B			     Strchr	     proc
1   272	014B  50 56				     push ax si
1   273	014D  33 C9				     xor cx, cx
1   274
1   275	014F  41		     @@Next:	     inc cx
1   276	0150  AC				     lodsb
1   277
1   278	0151  3C 00				     cmp al, 0
1   279	0153  74 06				     je	@@Terminate
1   280
1   281	0155  3A C3				     cmp al, bl
1   282	0157  74 04				     je	@@End
1   283
1   284	0159  EB F4				     jmp @@Next
1   285
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 6
main.asm



1   286	015B  33 C9		     @@Terminate:    xor cx, cx
1   287
1   288	015D  49		     @@End:	     dec cx
1   289	015E  5E 58				     pop si ax
1   290
1   291	0160  C3				     ret
1   292	0161					     endp
1   293
1   294				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   295				     ; Copies the first	n symbols of string
1   296				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   297				     ; Entry:	 SI = Address of string
1   298				     ;		 DI = Address of string	with copied symbols
1   299				     ;		 CX = Number of	symbols	to copy	(n)
1   300				     ; Exit:	 None
1   301				     ; Expects:	 None
1   302				     ; Destroys: None
1   303				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   304
1   305	0161			     Strncpy	 proc
1   306	0161  53 51 57 56			 push bx cx di si
1   307
1   308	0165  A4		     @@Next:	 movsb
1   309	0166  8A 1D				 mov bl, ds:[di]
1   310
1   311	0168  80 FB 00				 cmp bl, 0
1   312	016B  74 02				 je @@End
1   313
1   314	016D  E2 F6				 loop @@Next
1   315
1   316	016F  32 DB		     @@End:	 xor bl, bl
1   317	0171  88 1D				 mov ds:[di], bl
1   318
1   319	0173  5E 5F 59 5B			 pop si	di cx bx
1   320
1   321	0177  C3				 ret
1   322	0178					 endp
1   323
1   324				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   325				     ; Compares	the first n symbols of strings
1   326				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   327				     ; Entry:	 SI = Address of first string
1   328				     ;		 DI = Address of second	string
1   329				     ;		 CX = Number of	symbols	to compare (n)
1   330				     ; Exit:	 AX = 0	String1[:n] == String2[:n]
1   331				     ;		 AX > 0	String1[:n] >  String2[:n]
1   332				     ;		 AX < 0	String1[:n] <  String2[:n]
1   333				     ; Expects:	 None
1   334				     ; Destroys: None
1   335				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   336
1   337	0178			     Strncmp	 proc
1   338	0178  53 51 57 56			 push bx cx di si
1   339
1   340	017C  33 C0				 xor ax, ax
1   341
1   342	017E  8A 04		     @@Next:	 mov al, [si]
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 7
main.asm



1   343	0180  8A 1D				 mov bl, [di]
1   344
1   345	0182  2B C3				 sub ax, bx
1   346	0184  46				 inc si
1   347	0185  47				 inc di
1   348
1   349	0186  3D 0000				 cmp ax, 0
1   350	0189  75 0A				 jne @@End
1   351
1   352	018B  83 FB 00				 cmp bx, 0
1   353	018E  74 02				 je @@StrEnd
1   354
1   355	0190  E2 EC				 loop @@Next
1   356
1   357	0192  B8 0000		     @@StrEnd:	 mov ax, 0
1   358
1   359	0195  5E 5F 59 5B	     @@End:	 pop si	di cx bx
1   360
1   361	0199  C3				 ret
1   362	019A					 endp
1   363
1   364				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   365				     ; Converts	number with 16 radix in	string
1   366				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   367				     ; Entry:	 BX = Number
1   368				     ;		 DI = Address to put string
1   369				     ; Exit:	 DI = Address after string is placed
1   370				     ; Expects:	 None
1   371				     ; Destroys: None
1   372				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   373
1   374	019A			     Itoa16	 proc
1   375	019A  50 53 51 56			 push ax bx cx si
1   376
1   377	019E  B9 0004				 mov cx, 4
1   378
1   379	01A1  BE 01BAr		     @@Next:	 mov si, offset	hex_string
1   380	01A4  8B C3				 mov ax, bx
1   381	01A6  C1 E8 0C				 shr ax, 12d
1   382	01A9  03 F0				 add si, ax
1   383	01AB  8B 04				 mov ax, [si]
1   384	01AD  B4 3E				 mov ah, color
1   385	01AF  AB				 stosw
1   386	01B0  C1 E3 04				 shl bx, 4d
1   387
1   388	01B3  E2 EC				 loop @@Next
1   389
1   390	01B5  5E 59 5B 58			 pop si	cx bx ax
1   391
1   392	01B9  C3				 ret
1   393	01BA					 endp
1   394
1   395	01BA  30 31 32 33 34 35	36+  hex_string	db '0123456789ABCDEF'
    396	      37 38 39 41 42 43	44+
    397	      45 46
1   398
    399				     include funcs.asm
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 8
main.asm



1   400				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   401				     ; Puts address string in register and terminates it
1   402				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   403				     ; Entry:	 SI = Address of buffer
1   404				     ; Exit:	 SI = Address of the end of string
1   405				     ; Expects:	 None
1   406				     ; Destroys: AX
1   407				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   408
1   409	01CA			     Parse	 proc										    +
    410				     ; VULNERABILITY: NO LENGTH	CONTROL
1   411	01CA  B4 01				 mov ah, 01h
1   412
1   413	01CC  CD 21		     @@Next:	 int 21h
1   414	01CE  3C 0D				 cmp al, 0dh
1   415	01D0  74 05				 je @@End
1   416
1   417	01D2  88 04				 mov [si], al
1   418	01D4  46				 inc si
1   419
1   420	01D5  EB F5				 jmp @@Next
1   421
1   422	01D7  C6 04 00		     @@End:	 mov byte ptr [si], 00h
1   423
1   424	01DA  C3				 ret
1   425	01DB					 endp
1   426
1   427				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   428				     ; Encryptes cipher	and compares it	with given password
1   429				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   430				     ; Entry:	 SI = Address of terminated password string
1   431				     ;		 DI = Address of terminated cipher string
1   432				     ; Exit:	 AX = 0	 if password is	correct
1   433				     ;		 AX != 0 if password isn't correct
1   434				     ; Expects:	 None
1   435				     ; Destroys: CX
1   436				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   437
1   438	01DB			     Encrypte	 proc
1   439	01DB  56				 push si
1   440
1   441	01DC  8B 04		     @@Next:	 mov ax, [si]
1   442	01DE  3C 00				 cmp al, 00h
1   443	01E0  74 08				 je @@End
1   444
1   445	01E2  05 0003				 add ax, 3d
1   446	01E5  89 04				 mov [si], ax
1   447	01E7  46				 inc si
1   448
1   449	01E8  EB F2				 jmp @@Next
1   450
1   451	01EA  5E		     @@End:	 pop si
1   452
1   453	01EB  87 F7				     xchg si, di
1   454	01ED  E8 FF4D				 call Strlen
1   455	01F0  E8 FF85				 call Strncmp
1   456
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 9
main.asm



1   457	01F3  C3				 ret
1   458	01F4					 endp
1   459
1   460				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   461				     ; Prints label on center
1   462				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   463				     ; Entry:	 SI = Address of label
1   464				     ; Exit:	 None
1   465				     ; Expects:	 None
1   466				     ; Destroys: DI
1   467				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
1   468
1   469	01F4			     PrintLbl	 proc
1   470	01F4  BF 07D0				 mov di, 2 * (40 + 80 *	12)
1   471
1   472	01F7  E8 FF43				 call Strlen
1   473	01FA  D1 E9				 shr cx, 1d
1   474	01FC  D1 E1				 shl cx, 1d
1   475	01FE  2B F9				 sub di, cx
1   476
1   477	0200  E8 FF2C				 call PrintStr
1   478
1   479	0203  C3				 ret
1   480	0204					 endp
1   481
    482
    483	0204  14*(30) 00	     buffer db 20 dup(48d), 0
    484
    485				     ;~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    486
    487				     end Start
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 10
Symbol Table




Symbol Name			  Type	 Value

??DATE				  Text	 "03/13/23"
??FILENAME			  Text	 "main	  "
??TIME				  Text	 "13:30:27"
??VERSION			  Number 040A
@32BIT				  Text	 0
@@END				  Near	 DGROUP:0125
@@END				  Near	 DGROUP:013B
@@END				  Near	 DGROUP:015D
@@END				  Near	 DGROUP:016F
@@END				  Near	 DGROUP:0195
@@END				  Near	 DGROUP:01D7
@@END				  Near	 DGROUP:01EA
@@NEXT				  Near	 DGROUP:0133
@@NEXT				  Near	 DGROUP:0141
@@NEXT				  Near	 DGROUP:014F
@@NEXT				  Near	 DGROUP:0165
@@NEXT				  Near	 DGROUP:017E
@@NEXT				  Near	 DGROUP:01A1
@@NEXT				  Near	 DGROUP:01CC
@@NEXT				  Near	 DGROUP:01DC
@@STREND			  Near	 DGROUP:0192
@@TERMINATE			  Near	 DGROUP:015B
@@WRONG				  Near	 DGROUP:0122
@CODE				  Text	 DGROUP
@CODESIZE			  Text	 0
@CPU				  Text	 0707H
@CURSEG				  Text	 _TEXT
@DATA				  Text	 DGROUP
@DATASIZE			  Text	 0
@FILENAME			  Text	 MAIN
@INTERFACE			  Text	 000H
@MODEL				  Text	 1
@STACK				  Text	 DGROUP
@WORDSIZE			  Text	 2
BUFFER				  Byte	 DGROUP:0204
CIPHER				  Byte	 DGROUP:0000
COLOR				  Number 003E
ENCRYPTE			  Near	 DGROUP:01DB
HEX_STRING			  Byte	 DGROUP:01BA
ITOA16				  Near	 DGROUP:019A
PARSE				  Near	 DGROUP:01CA
PRINTLBL			  Near	 DGROUP:01F4
PRINTSTR			  Near	 DGROUP:012F
RIGHT_MESSAGE			  Byte	 DGROUP:0013
START				  Near	 DGROUP:0100
STRCHR				  Near	 DGROUP:014B
STRLEN				  Near	 DGROUP:013D
STRNCMP				  Near	 DGROUP:0178
STRNCPY				  Near	 DGROUP:0161
VIDEO				  Number B800
WRONG_MESSAGE			  Byte	 DGROUP:0005
Turbo Assembler	 Version 4.1	    03/13/23 13:30:27	    Page 11
Symbol Table




Macro Name

DELAY
EXIT
POPALL
PUSHALL

Groups & Segments		  Bit Size Align  Combine Class

DGROUP				  Group
  _DATA				  16  0023 Word	  Public  DATA
  _TEXT				  16  0219 Word	  Public  CODE
